{"version":3,"file":"index.es.js","sources":["../src/utils.js","../src/ResourceSelectWithTags.js","../src/TagsListEdit.js"],"sourcesContent":["/**\n * Useful, to avoid having to check if the field is an array or not.\n * Useful for json-ld objects where a field can be a single value or an array.\n *\n * @param {*} value A non-array value, an array or undefined.\n * @returns\n */\nexport const arrayFromLdField = (value) => {\n  // If the field is null-ish, we suppose there are no values.\n  if (!value) {\n    return [];\n  }\n  // Return as is.\n  if (Array.isArray(value)) {\n    return value;\n  }\n  // Single value is made an array.\n  return [value];\n};\n\n/**\n * Generate a random color using a string as seed.\n *\n * @param {string} value\n * @param {number} offset Optional.\n *  Min, max values for r, g, b between 0x00 and 0xff.\n *  Default min values are 0x50, max values 0xff.\n * @param {number} offset.r.min\n * @param {number} offset.r.max\n * @param {number} offset.g.min\n * @param {number} offset.g.max\n * @param {number} offset.b.min\n * @param {number} offset.b.max\n */\nexport const colorFromString = (value, offsets = {}) => {\n  const colRange = {\n    r: { min: 0x60, max: 0xff },\n    g: { min: 0x60, max: 0xff },\n    b: { min: 0x60, max: 0xff },\n    ...offsets,\n  };\n\n  // Generate some number between 0 and 1 from the string.\n  const numFromString = numberFromString(value);\n  // Use it to seed the random number generator\n  const randomGenerator = mulberry32(Math.floor(numFromString * 0xfffffff));\n\n  // Generate r,g,b values between 0 and 1.\n  const r = randomGenerator();\n  const g = randomGenerator();\n  const b = randomGenerator();\n  // Convert to a number between 0 and 0xFFFFFF, regard the offsets.\n  const colorNumber =\n    Math.floor(r * (colRange.r.max - colRange.r.min) + colRange.r.min) *\n      0x10000 +\n    Math.floor(g * (colRange.g.max - colRange.g.min) + colRange.g.min) * 0x100 +\n    Math.floor(b * (colRange.b.max - colRange.b.min) + colRange.b.min);\n\n  // Convert to padded hex string.\n  const hex = colorNumber.toString(16).padStart(6, \"0\");\n  return \"#\" + hex;\n};\n\n/**\n * Return a number between 0 and one from a seed string.\n * @param {string} seed\n * @returns\n */\nexport const numberFromString = (seed) => {\n  return Math.abs(\n    Math.sin(\n      seed.split(\"\").reduce((a, b) => {\n        a = (a << 5) - a + b.charCodeAt(0);\n        return a & a;\n      }, 0)\n    )\n  );\n};\n\n/**\n * Return a mulberry32 random number generator.\n * Generates numbers between 0 and 1.\n * See https://gist.github.com/tommyettinger/46a874533244883189143505d203312c\n *\n * @param {number} seed\n */\nexport const mulberry32 = (seed) => {\n  function next() {\n    let z = (seed += 0x9e3779b9) | 0; // the `| 0` coerces it into a 32-bit int\n    z ^= z >>> 16;\n    z = Math.imul(z, 0x21f0aaad);\n    z ^= z >>> 15;\n    z = Math.imul(z, 0x735a2d97);\n    z ^= z >>> 15;\n    return (z >>> 0) / 0x100000000;\n  }\n  return next;\n};\n","import Autocomplete from \"@material-ui/lab/Autocomplete/Autocomplete\";\nimport { arrayFromLdField, colorFromString } from \"./utils\";\nimport { useGetList, useTranslate } from \"react-admin\";\nimport {\n  Checkbox,\n  ListItemAvatar,\n  Avatar,\n  Typography,\n  TextField,\n  Chip,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\n\n/**\n * @typedef {import('react-admin').Record} Record\n\n * @typedef ResourceSelectWithTagsProps\n * @property {string} relationshipPredicate Tag field name that contains the list of resource ids.\n * @property {string} labelTagPredicate Tag field name that contains the tag label to show.\n * @property {string} [colorTagPredicate] Tag field name that contains the tag color, if present.\n * @property {string} [avatarTagPredicate] Tag field name that contains the tag avatar URI, if present.\n * @property {string} [colorResourcePredicate] Resource field name that contains the resource color, if present.\n * @property {string} [avatarResourcePredicate] Resource field name that contains the resource avatar URI, if present.\n * @property {string} labelResourcePredicate Resource field name that contains the resource label to show.\n * @property {boolean} showColors Whether to color tags (based on the tag name), when the tag doesn't have one.\n * @property {JSX.Element} [resourceDefaultIcon] Icon to show for resources that don't have an avatar.\n * @property {JSX.Element} [tagDefaultIcon] Icon to show for tags that don't have an avatar.\n * @property {string} entityResource The resource name of the entities that can be selected.\n * @property {string} tagResource The resource name of the tags that can be selected.\n * @property {string} resourceName Display name of the resource, used for grouping.\n * @property {string} tagName Display name of the tag, used for grouping.\n * @property {(ids: import('react-admin').Identifier[]) => void} onSelectionChange\n *   Called, when a new set of resources is selected. Includes the ids of all selected resources (not tags):\n * @property {import('react-admin').Identifier[]} excludeIds Ids of resources and tags that won't not be shown.\n *  This is for example useful, when a tag's owners are to be edited with this component.\n * @property {(tag: Record, selected: boolean) => JSX.Element} renderTagOption\n *  Custom renderer for tag options. Receives the tag record and whether it is selected.\n * @property {(resource: Record, selected: boolean) => JSX.Element} renderResourceOption\n *  Custom renderer for resource options. Receives the resource record and whether it is selected.\n*/\n\n/**\n * Autocomplete select that allows to select resources based on\n * their tags besides regular resource selection.\n *\n * The tag resources need to have a relationship field that is a list of resource ids.\n *\n * @param {import('@material-ui/lab').AutocompleteProps & ResourceSelectWithTagsProps} props\n */\nconst ResourceSelectWithTags = (props) => {\n  const {\n    relationshipPredicate,\n    labelTagPredicate,\n    colorTagPredicate,\n    colorResourcePredicate,\n    avatarTagPredicate,\n    avatarResourcePredicate,\n    labelResourcePredicate,\n    showColors,\n    tagResource,\n    entityResource,\n    resourceDefaultIcon,\n    tagDefaultIcon,\n    resourceName,\n    tagName,\n    excludeIds,\n    onSelectionChange,\n    renderTagOption: renderTagOptionProp,\n    renderResourceOption: renderResourceOptionProp,\n    ...restProps\n  } = props;\n\n  const translate = useTranslate();\n  // The selected resource state is maintained by the parent, if props.value is set.\n  const [selectedResourceIds, setSelectedResources] = useState(\n    props.value || []\n  );\n  useEffect(() => {\n    setSelectedResources(props.value || []);\n  }, [props.value]);\n\n  const { data: tagData, isLoading: isLoadingTags } = useGetList(tagResource);\n  const { data: resourceData, isLoading: isLoadingResources } = useGetList(\n    entityResource\n  );\n\n  // Create list of all resources and tags, sorted by their label as autocomplete select options.\n  // First, all tags are shown, then all resources.\n  const options = [\n    ...Object.values(tagData)\n      .sort((tag1, tag2) =>\n        (tag1[labelTagPredicate] || \"\").localeCompare(tag2[labelTagPredicate])\n      )\n      .map((tag) => tag.id),\n    ...Object.values(resourceData)\n      .sort((resource1, resource2) =>\n        (resource1[labelResourcePredicate] || \"\").localeCompare(\n          resource2[labelResourcePredicate]\n        )\n      )\n      .map((resource) => resource.id),\n    // Exclude ids that should not be shown.\n  ].filter((id) => !excludeIds.includes(id));\n\n  // We use this helper to identify selected tags, since those are not part\n  // of the values list (i.e. selectedResourceIds).\n  const isTagSelected = (tag) => {\n    const tagOwners = arrayFromLdField(tag[relationshipPredicate]);\n    if (tagOwners.length === 0) return false;\n    return tagOwners.every((owner) => selectedResourceIds.includes(owner));\n  };\n\n  const handleChange = (event, values, reason, { option: optionId }) => {\n    // Collect what resources to remove / add.\n    const newSelectedResourceIds = [];\n    const deselectedResourceIds = [];\n\n    // If the option is a tag, we need to add / remove all resources that have this tag.\n    if (tagData[optionId]) {\n      const clickedTag = tagData[optionId];\n      const tagOwners = arrayFromLdField(clickedTag[relationshipPredicate]);\n      // If the tag was selected...\n      // (We can't check `reason` here, because the tags are not part of the values list.)\n      if (!isTagSelected(clickedTag)) {\n        newSelectedResourceIds.push(...tagOwners);\n      } else {\n        deselectedResourceIds.push(...tagOwners);\n      }\n      // If the option was a resource...\n    } else if (resourceData[optionId]) {\n      if (reason === \"select-option\") {\n        newSelectedResourceIds.push(optionId);\n      } else if (reason === \"remove-option\") {\n        deselectedResourceIds.push(optionId);\n      }\n    }\n\n    const allSelectedResourceIds = [\n      ...new Set(\n        [...selectedResourceIds, ...newSelectedResourceIds].filter(\n          (id) => !deselectedResourceIds.includes(id)\n        )\n      ),\n    ];\n\n    setSelectedResources(allSelectedResourceIds);\n    onSelectionChange({ ids: allSelectedResourceIds });\n  };\n\n  const renderTagOption =\n    renderTagOptionProp ||\n    function(tag, selected) {\n      const tagColor =\n        tag[colorTagPredicate] ||\n        (showColors && colorFromString(tag[labelTagPredicate]));\n      return (\n        <>\n          <Checkbox checked={selected} />\n          {(tag[avatarTagPredicate] || tagDefaultIcon) && (\n            <ListItemAvatar\n              style={{\n                marginLeft: \"9px\",\n                marginRight: \"9px\",\n                minWidth: \"40px\",\n              }}\n            >\n              <Avatar\n                src={tag[avatarTagPredicate]}\n                style={{\n                  backgroundColor: tagColor,\n                  border: \"1px solid #bdbdbd\",\n                }}\n              >\n                {tagDefaultIcon}\n              </Avatar>\n            </ListItemAvatar>\n          )}\n          <Chip\n            size=\"small\"\n            variant=\"outlined\"\n            style={{ backgroundColor: tagColor, marginLeft: \"9px\" }}\n            label={tag[labelTagPredicate]}\n          />\n        </>\n      );\n    };\n\n  const renderResourceOption =\n    renderResourceOptionProp ||\n    function(option, selected) {\n      return (\n        <>\n          <Checkbox checked={selected} />\n\n          {(option[avatarResourcePredicate] || resourceDefaultIcon) && (\n            <ListItemAvatar\n              style={{\n                marginLeft: \"9px\",\n                marginRight: \"9px\",\n                minWidth: \"40px\",\n              }}\n            >\n              <Avatar\n                src={option[avatarResourcePredicate]}\n                style={{\n                  backgroundColor: option[colorResourcePredicate],\n                  border: \"1px solid #bdbdbd\",\n                }}\n              >\n                {resourceDefaultIcon}\n              </Avatar>\n            </ListItemAvatar>\n          )}\n          <Typography\n            variant=\"body2\"\n            color=\"textPrimary\"\n            style={{ marginLeft: \"9px\" }}\n          >\n            {option[labelResourcePredicate]}\n          </Typography>\n        </>\n      );\n    };\n\n  return (\n    <Autocomplete\n      multiple\n      options={options}\n      value={selectedResourceIds}\n      groupBy={(option) =>\n        tagData[option]\n          ? tagName || tagResource\n          : resourceName || entityResource\n      }\n      getOptionLabel={(id) =>\n        resourceData[id]?.[labelResourcePredicate] ||\n        tagData[id]?.[labelTagPredicate] ||\n        \"\"\n      }\n      onChange={handleChange}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          variant=\"outlined\"\n          label={translate(\"auth.input.agent_select\")}\n          fullWidth\n        />\n      )}\n      renderOption={(optionId) => {\n        // If the option is a tag..\n        if (tagData[optionId]) {\n          return renderTagOption(\n            tagData[optionId],\n            isTagSelected(tagData[optionId])\n          );\n        } else if (resourceData[optionId]) {\n          return renderResourceOption(\n            resourceData[optionId],\n            selectedResourceIds.includes(optionId)\n          );\n        }\n      }}\n      loading={isLoadingTags || isLoadingResources}\n      fullWidth\n      disableCloseOnSelect\n      closeIcon={null}\n      {...restProps}\n    />\n  );\n};\n\nResourceSelectWithTags.defaultProps = {\n  showColors: true,\n  excludeIds: [],\n};\n\nexport default ResourceSelectWithTags;\n","// Adopted from https://github.com/marmelab/react-admin/blob/master/examples/crm/src/contacts/TagsListEdit.tsx\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport {\n  useUpdate,\n  useGetList,\n  useRecordContext,\n  useTranslate,\n  useCreate,\n  LoadingIndicator,\n} from \"react-admin\";\nimport {\n  Chip,\n  Box,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  MenuItem,\n  Menu,\n  Grid,\n} from \"@mui/material\";\nimport ControlPointIcon from \"@mui/icons-material/ControlPoint\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport { arrayFromLdField, colorFromString } from \"./utils\";\n\nconst colors = [\n  \"lightblue\",\n  \"lightgreen\",\n  \"lightpink\",\n  \"lightyellow\",\n  \"lightgrey\",\n];\n\n/**\n * @typedef {import('react').MouseEvent<HTMLDivElement>} ReactDivMouseEvent\n * @typedef {import('react').FormEvent<HTMLFormElement>} ReactFormEvent\n * @typedef {import('react-admin').Identifier} Identifier\n *\n * @typedef {Object} TagsListEditProps\n * @property {string} relationshipPredicate Tag field name that contains the list of resource ids.\n * @property {string} namePredicate Tag field name that contains the tag label to show.\n * @property {string} [colorPredicate] Tag field name that contains the tag color, if present.\n * @property {string} [avatarPredicate] Tag field name that contains the tag avatar URI, if present.\n * @property {string} [idPredicate] Tag field name that contains the tag id, defaults to `id`.\n * @property {string} tagResource The resource name of the tags that can be selected.\n * @property {boolean} [showColors] Whether to show colors (based on tag name), even if the tag doesn't have one, default `true`.\n * @property {boolean} [allowCreate] Whether to allow creating new tags, default `true`.\n *\n */\n\n/**\n * @param {TagsListEditProps} props\n * @returns {JSX.Element | null}\n */\nconst TagsListEdit = (props) => {\n  const {\n    relationshipPredicate,\n    namePredicate,\n    colorPredicate,\n    avatarPredicate,\n    idPredicate,\n    tagResource,\n    showColors,\n    allowCreate,\n  } = props;\n\n  // For create new tag dialog.\n  const [isCreateDialogOpen, setCreateDialogOpen] = useState(false);\n  const [newTagName, setNewTagName] = useState(\"\");\n  const [newTagColor, setNewTagColor] = useState(colors[0]);\n  const [disabledCreateBtn, setDisabledCreateBtn] = useState(false);\n\n  // Anchor for the tag select menu.\n  const [menuAnchorEl, setMenuAnchorEl] = useState(null);\n\n  const translate = useTranslate();\n\n  const record = useRecordContext();\n  const recordId = record?.id;\n\n  const [update] = useUpdate();\n  const [create] = useCreate();\n  const [cacheInvalidated, setCacheInvalidated] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const {\n    data: tagData,\n    ids: tagIds,\n    loading: isLoadingAllTags,\n    refetch,\n  } = useGetList(tagResource);\n  const [tagDataState, setTagDataState] = useState({});\n\n  const [tagMemberships, setTagMemberships] = useState([]);\n  useEffect(() => {\n    // TODO: Remove condition, once migrated to ra-4. See https://github.com/marmelab/react-admin/issues/6780\n    //  The tagData is emptied on updates because the dataProvider cache is completely invalidated.\n    if (tagIds.length > 0) {\n      setTagDataState(tagData);\n      setTagMemberships(\n        Object.values(tagData)\n          .filter((tagData) =>\n            tagData[relationshipPredicate]?.includes(recordId)\n          )\n          .map((tagData) => tagData[idPredicate])\n      );\n    }\n  }, [\n    tagDataState,\n    tagData,\n    tagIds,\n    recordId,\n    idPredicate,\n    relationshipPredicate,\n  ]);\n\n  const saveStateToDataProvider = useCallback(() => {\n    if (isUpdating || !cacheInvalidated) return;\n    setIsUpdating(true);\n\n    // Update all tag resources where the membership has been modified (added / removed).\n    Promise.all(\n      Object.values(tagDataState).map((tagData) => {\n        const originalTagMemberships = arrayFromLdField(\n          tagData[relationshipPredicate]\n        );\n        const isOriginallyIncluded = originalTagMemberships.includes(recordId);\n        const isNowIncluded = tagMemberships.includes(tagData[idPredicate]);\n\n        if (isOriginallyIncluded === isNowIncluded) {\n          // Nothing to do.\n          return Promise.resolve();\n        }\n        let newMembers;\n        if (isNowIncluded) {\n          newMembers = [...originalTagMemberships, recordId];\n        } else {\n          newMembers = originalTagMemberships.filter(\n            (memberId) => memberId !== recordId\n          );\n        }\n        // Set the new members.\n        return update(tagResource, tagData[idPredicate], {\n          ...tagData,\n          [relationshipPredicate]: newMembers,\n        });\n      })\n    ).then(() => {\n      setCacheInvalidated(false);\n      setIsUpdating(false);\n    });\n  }, [\n    isUpdating,\n    recordId,\n    tagMemberships,\n    tagDataState,\n    cacheInvalidated,\n    relationshipPredicate,\n    idPredicate,\n    tagResource,\n    update,\n  ]);\n\n  // On unmount, save the state to the data provider\n  useEffect(() => () => saveStateToDataProvider(), [saveStateToDataProvider]);\n  // Also save on changes (cacheInvalidated) but only after a while...\n  useEffect(() => {\n    if (!isLoadingAllTags && cacheInvalidated && !isUpdating) {\n      new Promise((resolve) => setTimeout(resolve, 15_000)).then(() => {\n        saveStateToDataProvider();\n      });\n    }\n  }, [isLoadingAllTags, cacheInvalidated, isUpdating, saveStateToDataProvider]);\n\n  // Convert tagRelationshipData into a common tag format.\n  const tags = Object.values(tagDataState).map((tagData) => ({\n    id: tagData[idPredicate],\n    name: tagData[namePredicate],\n    // The color or a color generated from the name.\n    color:\n      tagData[colorPredicate] ||\n      (showColors && colorFromString(tagData[namePredicate])),\n    avatar: tagData[avatarPredicate],\n    owners: arrayFromLdField(tagData[relationshipPredicate]),\n  }));\n\n  const selectedTags = tags.filter((tag) => tagMemberships.includes(tag.id));\n  const unselectedTags = tags.filter((tag) => !tagMemberships.includes(tag.id));\n\n  /**\n   * @param {ReactDivMouseEvent} event\n   */\n  const handleOpen = (event) => {\n    setMenuAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setMenuAnchorEl(null);\n  };\n\n  /**\n   * @param {Identifier} id\n   */\n  const handleDeleteTag = (id) => {\n    setTagMemberships(tagMemberships.filter((tagId) => tagId !== id));\n    setCacheInvalidated(true);\n  };\n\n  /**\n   * @param {Identifier} id\n   */\n  const handleAddTag = (id) => {\n    setTagMemberships([...tagMemberships, id]);\n    setCacheInvalidated(true);\n    setMenuAnchorEl(null);\n  };\n\n  const handleOpenCreateDialog = () => {\n    setCreateDialogOpen(true);\n    setMenuAnchorEl(null);\n    setDisabledCreateBtn(false);\n  };\n\n  /**\n   * @param {ReactFormEvent} event\n   */\n  const handleCreateTag = (event) => {\n    event.preventDefault();\n    setDisabledCreateBtn(true);\n    create(\n      tagResource,\n      {\n        [namePredicate]: newTagName,\n        [relationshipPredicate]: [recordId],\n        ...((colorPredicate && { [colorPredicate]: newTagColor }) || {}),\n      },\n      {\n        onSuccess: () => {\n          setMenuAnchorEl(null);\n          setCreateDialogOpen(false);\n          refetch();\n        },\n      }\n    );\n  };\n\n  return (\n    <>\n      <Grid container spacing={1}>\n        {isLoadingAllTags && <LoadingIndicator />}\n\n        {selectedTags.map((tag) => (\n          <Grid item mt={1} mb={1} key={tag.id}>\n            <Chip\n              size=\"small\"\n              variant=\"outlined\"\n              onDelete={() => handleDeleteTag(tag.id)}\n              label={tag.name}\n              style={{ backgroundColor: tag.color, border: 0 }}\n            />\n          </Grid>\n        ))}\n\n        <Grid item mt={1} mb={1}>\n          <Chip\n            icon={<ControlPointIcon />}\n            size=\"small\"\n            variant=\"outlined\"\n            onClick={handleOpen}\n            label={translate(\"ra.action.add\")}\n            color=\"secondary\"\n          />\n        </Grid>\n      </Grid>\n      <Menu\n        open={Boolean(menuAnchorEl)}\n        onClose={handleClose}\n        anchorEl={menuAnchorEl}\n      >\n        {unselectedTags?.map((tag) => (\n          <MenuItem key={tag.id} onClick={() => handleAddTag(tag.id)}>\n            <Chip\n              size=\"small\"\n              variant=\"outlined\"\n              label={tag.name}\n              style={{\n                backgroundColor: tag.color,\n                border: 0,\n              }}\n              onClick={() => handleAddTag(tag.id)}\n            />\n          </MenuItem>\n        ))}\n        {allowCreate && (\n          <MenuItem onClick={handleOpenCreateDialog}>\n            <Chip\n              icon={<EditIcon />}\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={handleOpenCreateDialog}\n              color=\"primary\"\n              label={translate(\"ra.action.create\")}\n            />\n          </MenuItem>\n        )}\n      </Menu>\n      {allowCreate && (\n        <Dialog\n          open={isCreateDialogOpen}\n          onClose={() => setCreateDialogOpen(false)}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <form onSubmit={handleCreateTag}>\n            <DialogTitle id=\"form-dialog-title\">Create a new tag</DialogTitle>\n            <DialogContent>\n              <TextField\n                autoFocus\n                label=\"Tag name\"\n                fullWidth\n                value={newTagName}\n                onChange={(event) => setNewTagName(event.target.value)}\n                sx={{ mt: 1 }}\n              />\n              {colorPredicate && (\n                <Box display=\"flex\" flexWrap=\"wrap\" width={230} mt={2}>\n                  {colors.map((color) => (\n                    <RoundButton\n                      key={color}\n                      color={color}\n                      selected={color === newTagColor}\n                      handleClick={() => {\n                        setNewTagColor(color);\n                      }}\n                    />\n                  ))}\n                </Box>\n              )}\n            </DialogContent>\n            <DialogActions>\n              <Button\n                onClick={() => setCreateDialogOpen(false)}\n                color=\"primary\"\n              >\n                {translate(\"ra.action.cancel\")}\n              </Button>\n              <Button\n                type=\"submit\"\n                color=\"primary\"\n                disabled={disabledCreateBtn}\n              >\n                {translate(\"ra.action.create\")}\n              </Button>\n            </DialogActions>\n          </form>\n        </Dialog>\n      )}\n    </>\n  );\n};\n\n/**\n * @param {RoundButtonProps} props\n * @returns {JSX.Element}\n */\nconst RoundButton = (props) => (\n  <Box\n    component=\"button\"\n    type=\"button\"\n    sx={{\n      bgcolor: props.color,\n      width: 30,\n      height: 30,\n      borderRadius: 15,\n      border: props.selected ? \"2px solid grey\" : \"none\",\n      display: \"inline-block\",\n      margin: 1,\n    }}\n    onClick={props.handleClick}\n  />\n);\n\nTagsListEdit.defaultProps = {\n  idPredicate: \"id\",\n  showColors: true,\n  avatarPredicate: undefined,\n  colorPredicate: undefined,\n  allowCreate: true,\n};\n\nexport default TagsListEdit;\n"],"names":["arrayFromLdField","value","Array","isArray","colorFromString","offsets","colRange","_objectSpread","r","min","max","g","b","numFromString","numberFromString","randomGenerator","mulberry32","Math","floor","colorNumber","hex","toString","padStart","seed","abs","sin","split","reduce","a","charCodeAt","z","imul","ResourceSelectWithTags","props","relationshipPredicate","labelTagPredicate","colorTagPredicate","colorResourcePredicate","avatarTagPredicate","avatarResourcePredicate","labelResourcePredicate","showColors","tagResource","entityResource","resourceDefaultIcon","tagDefaultIcon","resourceName","tagName","excludeIds","onSelectionChange","renderTagOptionProp","renderTagOption","renderResourceOptionProp","renderResourceOption","restProps","_excluded","translate","useTranslate","_useState2","_slicedToArray","useState","selectedResourceIds","setSelectedResources","useEffect","useGetList","tagData","data","isLoadingTags","isLoading","resourceData","isLoadingResources","_useGetList2","options","Object","values","sort","tag1","tag2","localeCompare","map","tag","id","_toConsumableArray","resource1","resource2","resource","filter","includes","isTagSelected","tagOwners","length","every","owner","selected","tagColor","React","createElement","Fragment","Checkbox","checked","ListItemAvatar","style","marginLeft","marginRight","minWidth","Avatar","src","backgroundColor","border","Chip","size","variant","label","option","Typography","color","Autocomplete","_extends","multiple","groupBy","getOptionLabel","_resourceData$id","_tagData$id","onChange","event","reason","_ref","optionId","newSelectedResourceIds","deselectedResourceIds","clickedTag","push","apply","allSelectedResourceIds","Set","concat","ids","renderInput","params","TextField","fullWidth","renderOption","loading","disableCloseOnSelect","closeIcon","defaultProps","colors","TagsListEdit","namePredicate","colorPredicate","avatarPredicate","idPredicate","allowCreate","isCreateDialogOpen","setCreateDialogOpen","_useState4","newTagName","setNewTagName","_useState6","newTagColor","setNewTagColor","_useState8","disabledCreateBtn","setDisabledCreateBtn","_useState10","menuAnchorEl","setMenuAnchorEl","record","useRecordContext","recordId","update","useUpdate","create","useCreate","_useState12","cacheInvalidated","setCacheInvalidated","_useState14","isUpdating","setIsUpdating","tagIds","isLoadingAllTags","refetch","_useState16","tagDataState","setTagDataState","_useState18","tagMemberships","setTagMemberships","_tagData$relationship","saveStateToDataProvider","useCallback","Promise","all","newMembers","originalTagMemberships","isOriginallyIncluded","isNowIncluded","resolve","memberId","_defineProperty","then","setTimeout","tags","name","avatar","owners","selectedTags","unselectedTags","handleAddTag","handleOpenCreateDialog","Grid","container","spacing","LoadingIndicator","item","mt","mb","key","onDelete","tagId","icon","ControlPointIcon","onClick","currentTarget","Menu","open","Boolean","onClose","anchorEl","MenuItem","EditIcon","Dialog","aria-labelledby","onSubmit","_objectSpread3","preventDefault","onSuccess","DialogTitle","DialogContent","autoFocus","target","sx","Box","display","flexWrap","width","RoundButton","handleClick","DialogActions","Button","type","disabled","component","bgcolor","height","borderRadius","margin","undefined"],"mappings":"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"}